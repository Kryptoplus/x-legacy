const { Relayer } = require('@openzeppelin/defender-relay-client');
const { ethers } = require('ethers');

const contractAddress = '0x98e2Fa14BbE89F55d43A199ba36e9aD938DbD421';  // Replace with your actual contract address

require('events').EventEmitter.defaultMaxListeners = 20;

exports.handler = async (event) => {
    const req = event.body ? JSON.parse(event.body) : event; 
    console.log("Received event:", JSON.stringify(req));

    const { from, externalBridgeContract, amount, value, feeAmount, callData, requestId } = req;
    // const from = '0x84e199D87740658c3781fC0449e23849dea46a0d';  // Hardcoded from address

    if (!from || !externalBridgeContract || !amount || !value || !feeAmount || !callData || !requestId) {
        console.error("Missing required parameters");
        return {
            statusCode: 400,
            headers: {
                'Access-Control-Allow-Origin': '*', // Allow all origins or specify your domain
                'Access-Control-Allow-Methods': 'POST, GET, OPTIONS',
                'Access-Control-Allow-Headers': 'Content-Type, x-integrator-id'
            },
            body: JSON.stringify({ message: "Missing required parameters" })
        };
    }

    // Log the value parameter
    console.log("Value being sent:", value);


    // Define the ABI of the function to be called
    const abi = [
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "from",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "externalBridgeContract",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "amount",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "value",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "feeAmount",
                    "type": "uint256"
                },
                {
                    "internalType": "bytes",
                    "name": "callData",
                    "type": "bytes"
                }
            ],
            "name": "executeExternalCall",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
    ];

    // Setting up the ethers interface
    const iface = new ethers.Interface(abi);
    let encodedCallData = iface.encodeFunctionData("executeExternalCall", [from, externalBridgeContract, amount, value, feeAmount, callData]);
    // const encodedCallData = "0x4679564200000000000000000000000084e199d87740658c3781fc0449e23849dea46a0d000000000000000000000000ce16f69375520ab01377ce7b88f5ba8c48f8d666000000000000000000000000000000000000000000000000000000000007a12000000000000000000000000000000000000000000000000021adb0ec39442657000000000000000000000000000000000000000000000000000000000000271000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000010a4846a1bc6000000000000000000000000c2132d05d31c914a87c6611c10748aeb04b58e8f0000000000000000000000000000000000000000000000000000000000077a10000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000009000000000000000000000000000000000000000000000000000000000000000940000000000000000000000000000000000000000000000000000000000000098000000000000000000000000000000000000000000000000000000000000009e000000000000000000000000098e2fa14bbe89f55d43a199ba36e9ad938dbd4210000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000042000000000000000000000000000000000000000000000000000000000000005a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c2132d05d31c914a87c6611c10748aeb04b58e8f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000044095ea7b3000000000000000000000000f5b509bb0909a69b1c207e495f687a596c168e120000000000000000000000000000000000000000000000000000000000077a10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000c2132d05d31c914a87c6611c10748aeb04b58e8f00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f5b509bb0909a69b1c207e495f687a596c168e12000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000001c000000000000000000000000000000000000000000000000000000000000000e4bc651188000000000000000000000000c2132d05d31c914a87c6611c10748aeb04b58e8f0000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa84174000000000000000000000000ea749fd6ba492dbc14c24fe8a3d08769229b896c0000000000000000000000000000000000000000000000000000019089bb87a00000000000000000000000000000000000000000000000000000000000077a100000000000000000000000000000000000000000000000000000000000076e850000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000c2132d05d31c914a87c6611c10748aeb04b58e8f000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000010000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa84174000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000044095ea7b3000000000000000000000000f5b509bb0909a69b1c207e495f687a596c168e1200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa8417400000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000f5b509bb0909a69b1c207e495f687a596c168e12000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000001c000000000000000000000000000000000000000000000000000000000000000e4bc6511880000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa84174000000000000000000000000750e4c4984a9e0f12978ea6742bc1c5d248f40ed000000000000000000000000ce16f69375520ab01377ce7b88f5ba8c48f8d6660000000000000000000000000000000000000000000000000000019089bb87fa0000000000000000000000000000000000000000000000000000000000077a010000000000000000000000000000000000000000000000000000000000076e0400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa841740000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000761786c555344430000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000094176616c616e6368650000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002a3078636531364636393337353532306162303133373763653742383866354241384334384638443636360000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006a0000000000000000000000000000000000000000000000000000000000000004000000000000000000000000084e199d87740658c3781fc0449e23849dea46a0d000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000180000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000004c000000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000fab550568c688d5d8a52c7d794cb93edc26ec0ec0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000fab550568c688d5d8a52c7d794cb93edc26ec0ec000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000044095ea7b3000000000000000000000000d7bb79aee866672419999a0496d99c54741d67b50000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000fab550568c688d5d8a52c7d794cb93edc26ec0ec00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000d7bb79aee866672419999a0496d99c54741d67b5000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000000843df021240000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000779800000000000000000000000000000000000000000000000000000000000076fde000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000fab550568c688d5d8a52c7d794cb93edc26ec0ec00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000001000000000000000000000000b97ef9ef8734c71904d8002f8b6bc66dd9c48a6e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000044a9059cbb00000000000000000000000084e199d87740658c3781fc0449e23849dea46a0d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000b97ef9ef8734c71904d8002f8b6bc66dd9c48a6e000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000"

    console.log("Encoded call data:", encodedCallData);
    console.log("call data:", callData);

    // Decode the encoded call data and log it
    const decodedData = iface.decodeFunctionData("executeExternalCall", encodedCallData);
    console.log("Decoded call data:", decodedData);


    const credentials = { apiKey: process.env.RELAYER_API_KEY, apiSecret: process.env.RELAYER_API_SECRET };
    const relayer = new Relayer(credentials);

    try {
        // Sending the transaction
        const txDetails = {
            to: contractAddress,
            data: encodedCallData,
            value: "0",
            gasLimit: "6000000",
            // speed: "fastest",
            // gasPrice: "150000000032",
            maxFeePerGas: "150000000032",
            maxPriorityFeePerGas: "60000000000"
        };

        console.log("Sending transaction:", txDetails);
        const tx = await relayer.sendTransaction(txDetails);
        console.log("Transaction successful with hash:", tx.hash);

        // return {
        //     statusCode: 200,
        //     body: JSON.stringify({
        //         transactionId: tx.hash,
        //         requestId: requestId
        //     })
        // };
        return {
            statusCode: 200,
            headers: {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*', // Allow all origins or specify your domain
                'Access-Control-Allow-Methods': 'POST, GET, OPTIONS',
                'Access-Control-Allow-Headers': 'Content-Type, x-integrator-id'
            },
            body: JSON.stringify({
                transactionId: tx.hash,
                requestId: requestId
            })
        };
    } catch (error) {
        console.error("Transaction error:", error);
        return {
            statusCode: 500,
            headers: {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*', // Allow all origins or specify your domain
                'Access-Control-Allow-Methods': 'POST, GET, OPTIONS',
                'Access-Control-Allow-Headers': 'Content-Type, x-integrator-id'
            },
            body: JSON.stringify({ error: error.message })
        };
        // return {
        //     statusCode: 500,
        //     body: JSON.stringify({ error: error.message })
        // };
    }
};
